# Top-most EditorConfig file
root = true

###############################
# Global Rules                #
###############################
[*]

# Encoding rules
charset = utf-8
end_of_line = crlf

# Tab/Indentation rules (Please don't specify an indent_size here; that has too many unintended consequences.)
indent_style = space
tab_width = 4

# Line rules
insert_final_newline = false
max_line_length = 200

# Trailing whitespace rules
trim_trailing_whitespace = true

###############################
# C# Rules                    #
###############################

[*.cs]

# https://www.jetbrains.com/help/resharper/Reference__Code_Inspections_CSHARP.html
resharper_unused_member_global_highlighting = hint

dotnet_diagnostic.IDE0290.severity = none # IDE0290: Use primary constructor
dotnet_diagnostic.IDE0060.severity = suggestion # IDE0060: Remove unused parameter

dotnet_diagnostic.CS1591.severity = suggestion # CS1591: Missing XML comment for publicly visible type or member.

# Microsoft.VisualStudio.Threading.Analyzers
dotnet_diagnostic.VSTHRD002.severity = none # VSTHRD002: Use JoinableTaskFactory.Run instead of Task.Run
dotnet_diagnostic.VSTHRD100.severity = suggestion # VSTHRD100: Avoid using async void methods

# Code Quality Analyzers
# https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/AnalyzerReleases.Shipped.md
dotnet_diagnostic.CA1001.severity = warning # CA1001: Types that own disposable fields should be disposable.
dotnet_diagnostic.CA1002.severity = warning # CA1002: Do not expose generic lists.
dotnet_diagnostic.CA2000.severity = warning # CA2000: Dispose objects before losing scope.
dotnet_diagnostic.CA1003.severity = suggestion # CA1003: Use generic event handler instances.
dotnet_diagnostic.CA1008.severity = warning # CA1008: Enums should have zero value.
dotnet_diagnostic.CA1010.severity = suggestion # CA1010: Collections should implement generic interface.
dotnet_diagnostic.CA1014.severity = none # CA1014: Mark assemblies with CLSCompliantAttribute.
dotnet_diagnostic.CA1027.severity = warning # CA1027: Mark enums with FlagsAttribute.
dotnet_diagnostic.CA1030.severity = suggestion # CA1030: Use events where appropriate.
dotnet_diagnostic.CA1031.severity = suggestion # CA1031: Do not catch general exception types.
dotnet_diagnostic.CA1032.severity = suggestion # CA1032: Implement standard exception constructors.
dotnet_diagnostic.CA1034.severity = suggestion # CA1034: Nested types should not be visible.
dotnet_diagnostic.CA1040.severity = warning # CA1040: Avoid empty interfaces.
dotnet_diagnostic.CA1041.severity = error # CA1041: Provide ObsoleteAttribute message.
dotnet_diagnostic.CA1044.severity = error # CA1044: Properties should not be write only.
dotnet_diagnostic.CA1046.severity = error # CA1046: Do not overload operator equals on reference types.
dotnet_diagnostic.CA1047.severity = error # CA1047: Do not declare protected members in sealed types.
dotnet_diagnostic.CA1050.severity = error # CA1050: Declare types in namespaces.
dotnet_diagnostic.CA1051.severity = warning # CA1051: Do not declare visible instance fields.
dotnet_diagnostic.CA1054.severity = warning # CA1054: URI parameters should not be strings.
dotnet_diagnostic.CA1055.severity = warning # CA1055: URI return values should not be strings.
dotnet_diagnostic.CA1056.severity = warning # CA1056: URI properties should not be strings.
dotnet_diagnostic.CA1061.severity = error # CA1061: Do not hide base class methods.
dotnet_diagnostic.CA1062.severity = none # CA1062: Validate arguments of public methods.
dotnet_diagnostic.CA1063.severity = error # CA1063: Implement IDisposable correctly.
dotnet_diagnostic.CA1064.severity = error # CA1064: Exceptions should be public.
dotnet_diagnostic.CA1065.severity = warning # CA1065: Do not raise exceptions in unexpected locations.
dotnet_diagnostic.CA1066.severity = warning # CA1066: Implement IEquatable when overriding Equals.
dotnet_diagnostic.CA1067.severity = warning # CA1067: Override Equals when implementing IEquatable.
dotnet_diagnostic.CA1068.severity = warning # CA1068: CancellationToken parameters must come last.
dotnet_diagnostic.CA1069.severity = warning # CA1069: Enums should not have duplicate values.
dotnet_diagnostic.CA1070.severity = error # CA1070: Do not declare event fields as virtual.
dotnet_diagnostic.CA1304.severity = warning # CA1304: Specify CultureInfo.
dotnet_diagnostic.CA1305.severity = warning # CA1305: Specify IFormatProvider.
dotnet_diagnostic.CA1307.severity = warning # CA1307: Specify StringComparison for clarity.
dotnet_diagnostic.CA1308.severity = warning # CA1308: Normalize strings to uppercase.
dotnet_diagnostic.CA1309.severity = warning # CA1309: Use ordinal StringComparison.
dotnet_diagnostic.CA1310.severity = warning # CA1310: Specify StringComparison for correctness.
dotnet_diagnostic.CA1311.severity = warning # CA1311: Specify a culture or use an invariant version.
dotnet_diagnostic.CA1501.severity = warning # CA1501: Avoid excessive inheritance.
dotnet_diagnostic.CA1502.severity = suggestion # CA1502: Avoid excessive complexity.
dotnet_diagnostic.CA1505.severity = warning # CA1505: Avoid unmaintainable code.
dotnet_diagnostic.CA1506.severity = suggestion # CA1506: Avoid excessive class coupling.
dotnet_diagnostic.CA1507.severity = error # CA1507: Use nameof in place of string.
dotnet_diagnostic.CA1508.severity = warning # CA1508: Avoid dead conditional code.
dotnet_diagnostic.CS1591.severity = suggestion # CS1591: Missing XML comment for publicly visible type or member.
dotnet_diagnostic.CA1700.severity = error # CA1700: Do not name enum values 'Reserved'.
dotnet_diagnostic.CA1707.severity = error # CA1707: Identifiers should not contain underscores.
dotnet_diagnostic.CA1714.severity = warning # CA1714: Flags enums should have plural names.
dotnet_diagnostic.CA1715.severity = warning # CA1715: Identifiers should have correct prefix.
dotnet_diagnostic.CA1720.severity = warning # CA1720: Identifiers should not contain type names.
dotnet_diagnostic.CA1724.severity = error # CA1724: Type names should not match namespaces.
dotnet_diagnostic.CA1725.severity = warning # CA1725: Parameter names should match base declaration.
dotnet_diagnostic.CA1812.severity = warning # CA1812: Avoid uninstantiated internal classes.
dotnet_diagnostic.CA1813.severity = warning # CA1813: Avoid unsealed attributes.
dotnet_diagnostic.CA1815.severity = warning # CA1815: Override equals and operator equals on value types.
dotnet_diagnostic.CA1816.severity = warning # CA1816: Call GC.SuppressFinalize correctly.
dotnet_diagnostic.CA1819.severity = suggestion # CA1819: Properties should not return arrays.
dotnet_diagnostic.CA1820.severity = warning # CA1820: Test for empty strings using string length.
dotnet_diagnostic.CA1822.severity = suggestion # CA1822: Mark members as static.
dotnet_diagnostic.CA1823.severity = warning # CA1823: Avoid unused private fields.
dotnet_diagnostic.CA1824.severity = suggestion # CA1824: Mark assemblies with NeutralResourcesLanguageAttribute.
dotnet_diagnostic.CA1825.severity = warning # CA1825: Avoid zero-length array allocations.
dotnet_diagnostic.CA1826.severity = warning # CA1826: Use property instead of Linq Enumerable method.
dotnet_diagnostic.CA1827.severity = suggestion # CA1827: Do not use Count/LongCount when Any can be used.
dotnet_diagnostic.CA1828.severity = suggestion # CA1828: Do not use CountAsync/LongCountAsync when AnyAsync can be used.
dotnet_diagnostic.CA1829.severity = warning # CA1829: Use Length/Count property instead of Enumerable.Count method.
dotnet_diagnostic.CA1831.severity = warning # CA1831: Use AsSpan instead of Range-based indexers for string when appropriate.
dotnet_diagnostic.CA1832.severity = warning # CA1832: Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array.
dotnet_diagnostic.CA1833.severity = warning # CA1833: Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array.
dotnet_diagnostic.CA1835.severity = warning # CA1835: Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'.
dotnet_diagnostic.CA1836.severity = warning # CA1836: Prefer IsEmpty over Count when available.
dotnet_diagnostic.CA1837.severity = warning # CA1837: Use Environment.ProcessId instead of Process.GetCurrentProcess().Id.
dotnet_diagnostic.CA1839.severity = warning # CA1839: Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName.
dotnet_diagnostic.CA1840.severity = warning # CA1840: Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId.
dotnet_diagnostic.CA1841.severity = warning # CA1841: Prefer Dictionary Contains methods.
dotnet_diagnostic.CA1842.severity = warning # CA1842: Do not use 'WhenAll' with a single task.
dotnet_diagnostic.CA1843.severity = warning # CA1843: Do not use 'WaitAll' with a single task.
dotnet_diagnostic.CA1845.severity = warning # CA1845: Use span-based 'string.Concat'.
dotnet_diagnostic.CA1846.severity = warning # CA1846: Prefer AsSpan over Substring.
dotnet_diagnostic.CA1847.severity = warning # CA1847: Use char literal for a single character lookup.
dotnet_diagnostic.CA1848.severity = none # CA1848: Use the LoggerMessage delegates.
dotnet_diagnostic.CA1849.severity = warning # CA1849: Call async methods when in an async method.
dotnet_diagnostic.CA1850.severity = warning # CA1850: Prefer static HashData method over ComputeHash.
dotnet_diagnostic.CA1851.severity = warning # CA1851: Possible multiple enumerations of IEnumerable collection.
dotnet_diagnostic.CA1852.severity = warning # CA1852: Seal internal types.
dotnet_diagnostic.CA1853.severity = warning # CA1853: Unnecessary call to 'Dictionary.ContainsKey(key)'.
dotnet_diagnostic.CA1854.severity = warning # CA1854: Prefer the 'IDictionary.TryGetValue(TKey, out TValue)' method.
dotnet_diagnostic.CA1855.severity = warning # CA1855: Use Span<T>.Clear() instead of Span<T>.Fill().
dotnet_diagnostic.CA1858.severity = warning # CA1858: Use StartsWith instead of IndexOf.
dotnet_diagnostic.CA1859.severity = suggestion # CA1859: Use concrete types when possible for improved performance.
dotnet_diagnostic.CA1860.severity = warning # CA1860: Avoid using 'Enumerable.Any()' extension method.
dotnet_diagnostic.CA1861.severity = warning # CA1861: Avoid constant arrays as arguments.
dotnet_diagnostic.CA1864.severity = warning # CA1864: Prefer the 'IDictionary.TryAdd(TKey, TValue)' method.
dotnet_diagnostic.CA2007.severity = warning # CA2007: Do not directly await a Task without calling ConfigureAwait.
dotnet_code_quality.CA2007.output_kind = ConsoleApplication, DynamicallyLinkedLibrary
dotnet_diagnostic.CA2012.severity = warning # CA2012: Use ValueTasks correctly.

# Microsoft .NET properties
csharp_new_line_before_members_in_object_initializers = false
dotnet_naming_rule.unity_serialized_field_rule.severity = warning
dotnet_naming_rule.unity_serialized_field_rule.style = lower_camel_case_style
dotnet_naming_rule.unity_serialized_field_rule.symbols = unity_serialized_field_symbols
dotnet_naming_style.lower_camel_case_style.capitalization = camel_case
dotnet_naming_symbols.unity_serialized_field_symbols.applicable_accessibilities = *
dotnet_naming_symbols.unity_serialized_field_symbols.applicable_kinds =

# ReSharper properties
resharper_csharp_empty_block_style = together_same_line
resharper_csharp_insert_final_newline = false
resharper_csharp_keep_blank_lines_in_code = 1
resharper_csharp_keep_blank_lines_in_declarations = 1
resharper_csharp_wrap_after_declaration_lpar = true
resharper_csharp_wrap_before_first_type_parameter_constraint = true
resharper_csharp_wrap_parameters_style = chop_if_long
resharper_for_simple_types = use_var_when_evident
resharper_keep_existing_embedded_arrangement = false
resharper_keep_existing_switch_expression_arrangement = false
resharper_place_accessorholder_attribute_on_same_line = false
resharper_place_accessor_attribute_on_same_line = false
resharper_place_constructor_initializer_on_same_line = false
resharper_place_field_attribute_on_same_line = false
resharper_place_simple_embedded_statement_on_same_line = false
resharper_trailing_comma_in_multiline_lists = true
resharper_wrap_before_arrow_with_expressions = true
resharper_wrap_before_eq = true
resharper_wrap_chained_binary_expressions = chop_if_long
resharper_wrap_chained_binary_patterns = chop_if_long
resharper_xmldoc_indent_text = ZeroIndent
resharper_class_never_instantiated_global_highlighting = do_not_show

# Organize using directives
dotnet_sort_system_directives_first = true

# Avoid "this." if not necessary
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error
dotnet_style_readonly_field = true:warning

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Expression-level preferences
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:silent
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Use PascalCase for constant fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities = *
dotnet_naming_symbols.constant_fields.required_modifiers = const

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

# Constants are lowerPascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = camel_case

# Static fields are camelCase and start with _
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_field_style.capitalization = camel_case
dotnet_naming_style.static_field_style.required_prefix = _

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *

# var preferences
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:none

# Expression body preferences
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Expression-level preferences
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_square_brackets = false

# Blocks are allowed
csharp_prefer_braces = true:silent

# Single line preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

###############################
# JSON Rules                  #
###############################
[*.json]
indent_size = 2